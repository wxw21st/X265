#include "config.h"
#include <cuda.h>
#include <stdio.h>

//#define DEBUG_GPU

#ifdef DEBUG_GPU
#define __global__
#define __device__
#define __constant__
#define __inline__ static
#endif

__inline__ static int xLog2(UInt32 x)
{
    UInt32 r;
    union {
        float f;
        unsigned i;
    } tmp;
    tmp.f = (float)x;

    r  = (tmp.i >> 23);
    r &= 7;
    r += 1;
    return r;
}

__inline__ __device__ UInt32 xLog2_new( UInt32 x )
{
#if 0//defined(DEBUG_GPU)
    UInt32 r;
    union {
        float f;
        unsigned i;
    } tmp;
    tmp.f = x;

    r  = (tmp.i >> 23);
    r &= 7;
    r += 1;
    return r;
#else
    return __log2f( x );
#endif
}

__inline__ __device__ UInt32 Clip3( Int32 minVal, Int32 maxVal, Int32 a )
{
    if ( a < minVal )
        a = minVal;
    if ( a > maxVal )
        a = maxVal;
    return a;
}

#define Clip(x)         Clip3( 0, 255, (x))

    __constant__ __device__ __declspec(align(4)) static CUInt8 ucModeIdx[4][NUM_INTRA_MODE][2*MAX_CU_SIZE] = {
        // 4x4
        {
            // Mode  0
            {
                0,
            },
            // Mode  1
            {
                0x07, 0x06, 0x05, 0x04,
                0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode  2 Info:(  2->  5), [  2,  8], size= 7
            {
                0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            },
            // Mode  3 Info:(  1->  4), [  1,  8], size= 8
            {
                0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            },
            // Mode  4 Info:(  1->  3), [  1,  7], size= 7
            {
                0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
            },
            // Mode  5 Info:(  1->  3), [  1,  7], size= 7
            {
                0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
            },
            // Mode  6 Info:(  1->  2), [  1,  6], size= 6
            {
                0x07, 0x06, 0x05, 0x04, 0x03, 0x02,
            },
            // Mode  7 Info:(  1->  2), [  1,  6], size= 6
            {
                0x07, 0x06, 0x05, 0x04, 0x03, 0x02,
            },
            // Mode  8 Info:(  1->  1), [  1,  5], size= 5
            {
                0x07, 0x06, 0x05, 0x04, 0x03,
            },
            // Mode  9 Info:(  1->  1), [  1,  5], size= 5
            {
                0x07, 0x06, 0x05, 0x04, 0x03,
            },
            // Mode 10 Info:(  1->  1), [  1,  4], size= 4
            {
                0x07, 0x06, 0x05, 0x04,
            },
            // Mode 11 Info:(  0->  0), [  0,  4], size= 5
            {
                0x00, 0x00, 0x00, 0x08, 0x07, 0x06, 0x05, 0x04,
            },
            // Mode 12 Info:(  0->  0), [  0,  4], size= 5
            {
                0x00, 0x00, 0x00, 0x08, 0x07, 0x06, 0x05, 0x04,
            },
            // Mode 13 Info:(  0-> -1), [ -1,  4], size= 6
            {
                0x00, 0x00, 0x0C, 0x08, 0x07, 0x06, 0x05, 0x04,
            },
            // Mode 14 Info:(  0-> -1), [ -1,  4], size= 6
            {
                0x00, 0x00, 0x0A, 0x08, 0x07, 0x06, 0x05, 0x04,
            },
            // Mode 15 Info:(  0-> -2), [ -2,  4], size= 7
            {
                0x00, 0x0C, 0x0A, 0x08, 0x07, 0x06, 0x05, 0x04,
            },
            // Mode 16 Info:(  0-> -2), [ -2,  4], size= 7
            {
                0x00, 0x0B, 0x0A, 0x08, 0x07, 0x06, 0x05, 0x04,
            },
            // Mode 17 Info:(  0-> -3), [ -3,  4], size= 8
            {
                0x0C, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04,
            },
            // Mode 18 Info:(  0-> -3), [ -3,  3], size= 7
            {
                0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
            },
            // Mode 19 Info:(  0-> -3), [ -3,  4], size= 8
            {
                0x04, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode 20 Info:(  0-> -2), [ -2,  4], size= 7
            {
                0x00, 0x05, 0x06, 0x08, 0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode 21 Info:(  0-> -2), [ -2,  4], size= 7
            {
                0x00, 0x04, 0x06, 0x08, 0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode 22 Info:(  0-> -1), [ -1,  4], size= 6
            {
                0x00, 0x00, 0x06, 0x08, 0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode 23 Info:(  0-> -1), [ -1,  4], size= 6
            {
                0x00, 0x00, 0x04, 0x08, 0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode 24 Info:(  0->  0), [  0,  4], size= 5
            {
                0x00, 0x00, 0x00, 0x08, 0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode 25 Info:(  0->  0), [  0,  4], size= 5
            {
                0x00, 0x00, 0x00, 0x08, 0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode 26 Info:(  1->  1), [  1,  4], size= 4
            {
                0x09, 0x0A, 0x0B, 0x0C,
            },
            // Mode 27 Info:(  1->  1), [  1,  5], size= 5
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            },
            // Mode 28 Info:(  1->  1), [  1,  5], size= 5
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            },
            // Mode 29 Info:(  1->  2), [  1,  6], size= 6
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
            },
            // Mode 30 Info:(  1->  2), [  1,  6], size= 6
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
            },
            // Mode 31 Info:(  1->  3), [  1,  7], size= 7
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            },
            // Mode 32 Info:(  1->  3), [  1,  7], size= 7
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            },
            // Mode 33 Info:(  1->  4), [  1,  8], size= 8
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
            },
            // Mode 34 Info:(  2->  5), [  2,  8], size= 7
            {
                0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
            },
        },
        // 8x8
        {
            // Mode  0
            {
                0,
            },
            // Mode  1
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode  2 Info:(  2->  9), [  2, 16], size=15
            {
                0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            },
            // Mode  3 Info:(  1->  7), [  1, 15], size=15
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
            },
            // Mode  4 Info:(  1->  6), [  1, 14], size=14
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02,
            },
            // Mode  5 Info:(  1->  5), [  1, 13], size=13
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03,
            },
            // Mode  6 Info:(  1->  4), [  1, 12], size=12
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04,
            },
            // Mode  7 Info:(  1->  3), [  1, 11], size=11
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05,
            },
            // Mode  8 Info:(  1->  2), [  1, 10], size=10
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06,
            },
            // Mode  9 Info:(  1->  1), [  1,  9], size= 9
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07,
            },
            // Mode 10 Info:(  1->  1), [  1,  8], size= 8
            {
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
            },
            // Mode 11 Info:(  0->  0), [  0,  8], size= 9
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
            },
            // Mode 12 Info:(  0-> -1), [ -1,  8], size=10
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
            },
            // Mode 13 Info:(  0-> -2), [ -2,  8], size=11
            {
                0x00, 0x00, 0x00, 0x00, 0x17, 0x14, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
            },
            // Mode 14 Info:(  0-> -3), [ -3,  8], size=12
            {
                0x00, 0x00, 0x00, 0x17, 0x15, 0x12, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
            },
            // Mode 15 Info:(  0-> -4), [ -4,  8], size=13
            {
                0x00, 0x00, 0x18, 0x16, 0x14, 0x12, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
            },
            // Mode 16 Info:(  0-> -5), [ -5,  8], size=14
            {
                0x00, 0x18, 0x16, 0x15, 0x13, 0x12, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
            },
            // Mode 17 Info:(  0-> -6), [ -6,  8], size=15
            {
                0x17, 0x16, 0x15, 0x14, 0x12, 0x11, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
            },
            // Mode 18 Info:(  0-> -7), [ -7,  7], size=15
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            },
            // Mode 19 Info:(  0-> -6), [ -6,  8], size=15
            {
                0x09, 0x0A, 0x0B, 0x0C, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode 20 Info:(  0-> -5), [ -5,  8], size=14
            {
                0x00, 0x08, 0x0A, 0x0B, 0x0D, 0x0E, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode 21 Info:(  0-> -4), [ -4,  8], size=13
            {
                0x00, 0x00, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode 22 Info:(  0-> -3), [ -3,  8], size=12
            {
                0x00, 0x00, 0x00, 0x09, 0x0B, 0x0E, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode 23 Info:(  0-> -2), [ -2,  8], size=11
            {
                0x00, 0x00, 0x00, 0x00, 0x09, 0x0C, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode 24 Info:(  0-> -1), [ -1,  8], size=10
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode 25 Info:(  0->  0), [  0,  8], size= 9
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode 26 Info:(  1->  1), [  1,  8], size= 8
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            },
            // Mode 27 Info:(  1->  1), [  1,  9], size= 9
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
            },
            // Mode 28 Info:(  1->  2), [  1, 10], size=10
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A,
            },
            // Mode 29 Info:(  1->  3), [  1, 11], size=11
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B,
            },
            // Mode 30 Info:(  1->  4), [  1, 12], size=12
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C,
            },
            // Mode 31 Info:(  1->  5), [  1, 13], size=13
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
            },
            // Mode 32 Info:(  1->  6), [  1, 14], size=14
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
            },
            // Mode 33 Info:(  1->  7), [  1, 15], size=15
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            },
            // Mode 34 Info:(  2->  9), [  2, 16], size=15
            {
                0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
            },
        },
        // 16x16
        {
            // Mode  0
            {
                0,
            },
            // Mode  1
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode  2 Info:(  2-> 17), [  2, 32], size=31
            {
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0F,
                0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            },
            // Mode  3 Info:(  1-> 14), [  1, 29], size=29
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03,
            },
            // Mode  4 Info:(  1-> 11), [  1, 27], size=27
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05,
            },
            // Mode  5 Info:(  1->  9), [  1, 25], size=25
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07,
            },
            // Mode  6 Info:(  1->  7), [  1, 23], size=23
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09,
            },
            // Mode  7 Info:(  1->  5), [  1, 21], size=21
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B,
            },
            // Mode  8 Info:(  1->  3), [  1, 19], size=19
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F, 0x0E, 0x0D,
            },
            // Mode  9 Info:(  1->  2), [  1, 17], size=17
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F,
            },
            // Mode 10 Info:(  1->  1), [  1, 16], size=16
            {
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
            },
            // Mode 11 Info:(  0->  0), [  0, 16], size=17
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1F,
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
            },
            // Mode 12 Info:(  0-> -2), [ -2, 16], size=19
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x26, 0x20, 0x1F,
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
            },
            // Mode 13 Info:(  0-> -4), [ -4, 16], size=21
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x2B, 0x27, 0x24, 0x20, 0x1F,
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
            },
            // Mode 14 Info:(  0-> -6), [ -6, 16], size=23
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x2C, 0x2A, 0x27, 0x25, 0x22, 0x20, 0x1F,
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
            },
            // Mode 15 Info:(  0-> -8), [ -8, 16], size=25
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x2D, 0x2B, 0x29, 0x28, 0x26, 0x24, 0x22, 0x20, 0x1F,
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
            },
            // Mode 16 Info:(  0->-10), [-10, 16], size=27
            {
                0x00, 0x00, 0x00, 0x00, 0x2F, 0x2E, 0x2C, 0x2B, 0x29, 0x28, 0x26, 0x25, 0x23, 0x22, 0x20, 0x1F,
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
            },
            // Mode 17 Info:(  0->-12), [-12, 16], size=29
            {
                0x00, 0x00, 0x2F, 0x2E, 0x2C, 0x2B, 0x2A, 0x29, 0x27, 0x26, 0x25, 0x24, 0x22, 0x21, 0x20, 0x1F,
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
            },
            // Mode 18 Info:(  0->-15), [-15, 15], size=31
            {
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            },
            // Mode 19 Info:(  0->-12), [-12, 16], size=29
            {
                0x00, 0x00, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17, 0x19, 0x1A, 0x1B, 0x1C, 0x1E, 0x1F, 0x20, 0x21,
                0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode 20 Info:(  0->-10), [-10, 16], size=27
            {
                0x00, 0x00, 0x00, 0x00, 0x11, 0x12, 0x14, 0x15, 0x17, 0x18, 0x1A, 0x1B, 0x1D, 0x1E, 0x20, 0x21,
                0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode 21 Info:(  0-> -8), [ -8, 16], size=25
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x13, 0x15, 0x17, 0x18, 0x1A, 0x1C, 0x1E, 0x20, 0x21,
                0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode 22 Info:(  0-> -6), [ -6, 16], size=23
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x14, 0x16, 0x19, 0x1B, 0x1E, 0x20, 0x21,
                0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode 23 Info:(  0-> -4), [ -4, 16], size=21
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x15, 0x19, 0x1C, 0x20, 0x21,
                0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode 24 Info:(  0-> -2), [ -2, 16], size=19
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x1A, 0x20, 0x21,
                0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode 25 Info:(  0->  0), [  0, 16], size=17
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x21,
                0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode 26 Info:(  1->  1), [  1, 16], size=16
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
            },
            // Mode 27 Info:(  1->  2), [  1, 17], size=17
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31,
            },
            // Mode 28 Info:(  1->  3), [  1, 19], size=19
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33,
            },
            // Mode 29 Info:(  1->  5), [  1, 21], size=21
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33, 0x34, 0x35,
            },
            // Mode 30 Info:(  1->  7), [  1, 23], size=23
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            },
            // Mode 31 Info:(  1->  9), [  1, 25], size=25
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            },
            // Mode 32 Info:(  1-> 11), [  1, 27], size=27
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
            },
            // Mode 33 Info:(  1-> 14), [  1, 29], size=29
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D,
            },
            // Mode 34 Info:(  2-> 17), [  2, 32], size=31
            {
                0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31,
                0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40,
            },
        },
        // 32x32
        {
            // Mode  0
            {
                0,
            },
            // Mode  1
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode  2 Info:(  2-> 33), [  2, 64], size=63
            {
                0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F,
                0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1F,
                0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0F,
                0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            },
            // Mode  3 Info:(  1-> 27), [  1, 58], size=58
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06,
            },
            // Mode  4 Info:(  1-> 22), [  1, 53], size=53
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F, 0x0E, 0x0D, 0x0C, 0x0B,
            },
            // Mode  5 Info:(  1-> 18), [  1, 49], size=49
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                0x0F,
            },
            // Mode  6 Info:(  1-> 14), [  1, 45], size=45
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13,
            },
            // Mode  7 Info:(  1-> 10), [  1, 41], size=41
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17,
            },
            // Mode  8 Info:(  1->  6), [  1, 37], size=37
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                0x1F, 0x1E, 0x1D, 0x1C, 0x1B,
            },
            // Mode  9 Info:(  1->  3), [  1, 34], size=34
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                0x1F, 0x1E,
            },
            // Mode 10 Info:(  1->  1), [  1, 32], size=32
            {
                0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            },
            // Mode 11 Info:(  0-> -1), [ -1, 32], size=34
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x40, 0x3F,
                0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F,
                0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            },
            // Mode 12 Info:(  0-> -4), [ -4, 32], size=37
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x53, 0x4D, 0x46, 0x40, 0x3F,
                0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F,
                0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            },
            // Mode 13 Info:(  0-> -8), [ -8, 32], size=41
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x59, 0x55, 0x52, 0x4E, 0x4B, 0x47, 0x44, 0x40, 0x3F,
                0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F,
                0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            },
            // Mode 14 Info:(  0->-12), [-12, 32], size=45
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x5E, 0x5B, 0x59, 0x56, 0x54, 0x51, 0x4F, 0x4C, 0x4A, 0x47, 0x45, 0x42, 0x40, 0x3F,
                0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F,
                0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            },
            // Mode 15 Info:(  0->-16), [-16, 32], size=49
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x5C,
                0x5A, 0x58, 0x57, 0x55, 0x53, 0x51, 0x4F, 0x4D, 0x4B, 0x49, 0x48, 0x46, 0x44, 0x42, 0x40, 0x3F,
                0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F,
                0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            },
            // Mode 16 Info:(  0->-20), [-20, 32], size=53
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x5D, 0x5B, 0x5A, 0x58, 0x57,
                0x55, 0x54, 0x52, 0x51, 0x4F, 0x4E, 0x4C, 0x4B, 0x49, 0x48, 0x46, 0x45, 0x43, 0x42, 0x40, 0x3F,
                0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F,
                0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            },
            // Mode 17 Info:(  0->-25), [-25, 32], size=58
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x5E, 0x5C, 0x5B, 0x5A, 0x59, 0x57, 0x56, 0x55, 0x54, 0x52,
                0x51, 0x50, 0x4F, 0x4E, 0x4C, 0x4B, 0x4A, 0x49, 0x47, 0x46, 0x45, 0x44, 0x42, 0x41, 0x40, 0x3F,
                0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2F,
                0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            },
            // Mode 18 Info:(  0->-31), [-31, 31], size=63
            {
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40,
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
            },
            // Mode 19 Info:(  0->-25), [-25, 32], size=58
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x24, 0x25, 0x26, 0x27, 0x29, 0x2A, 0x2B, 0x2C, 0x2E,
                0x2F, 0x30, 0x31, 0x32, 0x34, 0x35, 0x36, 0x37, 0x39, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x40, 0x41,
                0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
                0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode 20 Info:(  0->-20), [-20, 32], size=53
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x23, 0x25, 0x26, 0x28, 0x29,
                0x2B, 0x2C, 0x2E, 0x2F, 0x31, 0x32, 0x34, 0x35, 0x37, 0x38, 0x3A, 0x3B, 0x3D, 0x3E, 0x40, 0x41,
                0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
                0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode 21 Info:(  0->-16), [-16, 32], size=49
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x24,
                0x26, 0x28, 0x29, 0x2B, 0x2D, 0x2F, 0x31, 0x33, 0x35, 0x37, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x41,
                0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
                0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode 22 Info:(  0->-12), [-12, 32], size=45
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x22, 0x25, 0x27, 0x2A, 0x2C, 0x2F, 0x31, 0x34, 0x36, 0x39, 0x3B, 0x3E, 0x40, 0x41,
                0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
                0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode 23 Info:(  0-> -8), [ -8, 32], size=41
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x27, 0x2B, 0x2E, 0x32, 0x35, 0x39, 0x3C, 0x40, 0x41,
                0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
                0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode 24 Info:(  0-> -4), [ -4, 32], size=37
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x2D, 0x33, 0x3A, 0x40, 0x41,
                0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
                0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode 25 Info:(  0-> -1), [ -1, 32], size=34
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x40, 0x41,
                0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
                0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode 26 Info:(  1->  1), [  1, 32], size=32
            {
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
            },
            // Mode 27 Info:(  1->  3), [  1, 34], size=34
            {
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
                0x61, 0x62,
            },
            // Mode 28 Info:(  1->  6), [  1, 37], size=37
            {
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
                0x61, 0x62, 0x63, 0x64, 0x65,
            },
            // Mode 29 Info:(  1-> 10), [  1, 41], size=41
            {
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
                0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
            },
            // Mode 30 Info:(  1-> 14), [  1, 45], size=45
            {
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
                0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D,
            },
            // Mode 31 Info:(  1-> 18), [  1, 49], size=49
            {
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
                0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
                0x71,
            },
            // Mode 32 Info:(  1-> 22), [  1, 53], size=53
            {
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
                0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
                0x71, 0x72, 0x73, 0x74, 0x75,
            },
            // Mode 33 Info:(  1-> 27), [  1, 58], size=58
            {
                0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
                0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,
                0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
                0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A,
            },
            // Mode 34 Info:(  2-> 33), [  2, 64], size=63
            {
                0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
                0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61,
                0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71,
                0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80,
            },
        },
    };
    //Int offset = (nIntraPredAngle < 0 ? 2*nSize-1-nSize+1-1 + (nMode == 18 && nSize != 4) + (nSize == 4) : 0);
//     __constant__ static CUInt8 ucOffset[4][NUM_INTRA_MODE] = {
//         // 4x4
//         {
//               0,  0, // Invalid
//               0,  0,  0,  0,  0,  0,  0,  0,
//               0,  4,  4,  4,  4,  4,  4,  4,
//               4,  4,  4,  4,  4,  4,  4,  4,
//               0,  0,  0,  0,  0,  0,  0,  0,
//               0
//         },
//         // 8x8
//         {
//               0,  0, // Invalid
//               0,  0,  0,  0,  0,  0,  0,  0,
//               0,  7,  7,  7,  7,  7,  7,  7,
//               8,  7,  7,  7,  7,  7,  7,  7,
//               0,  0,  0,  0,  0,  0,  0,  0,
//               0
//         },
//         // 16x16
//         {
//               0,  0, // Invalid
//               0,  0,  0,  0,  0,  0,  0,  0,
//               0, 15, 15, 15, 15, 15, 15, 15,
//              16, 15, 15, 15, 15, 15, 15, 15,
//               0,  0,  0,  0,  0,  0,  0,  0,
//               0
//         },
//         // 32x32
//         {
//               0,  0, // Invalid
//               0,  0,  0,  0,  0,  0,  0,  0,
//               0, 31, 31, 31, 31, 31, 31, 31,
//              32, 31, 31, 31, 31, 31, 31, 31,
//               0,  0,  0,  0,  0,  0,  0,  0,
//               0
//         },
//     };

    // Table 8-5 Specification of intraPredAngle
__constant__ CInt8 cxg_aucIntraPredAngle[NUM_INTRA_MODE] = {
     0,   0, // Invalid
     32, 26, 21, 17, 13,  9,  5,  2,
      0, -2, -5, -9,-13,-17,-21,-26,
    -32,-26,-21,-17,-13, -9, -5, -2,
      0,  2,  5,  9, 13, 17, 21, 26,
     32
};

// Table 8-4 (Changed)
__constant__ UInt64 cxg_aucIntraFilterTypePacked[5] = {
    0x000000000ULL,
    0x400040005ULL,
    0x7F1FFF1FDULL,
    0x7FBFFFBFDULL,
    0x000000000ULL,
};
// __constant__ CUInt8 cxg_aucIntraFilterType[5][NUM_INTRA_MODE] = {
//     //  Index:    0, 1, 2, 3,  4, 5, 6, 7,  8, 9,10,11, 12,13,14,15, 16,17,18,19, 20,21,22,23, 24,25,26,27, 28,29,30,31, 32,33,34
//     //  Diff:    10, 9, 8, 7,  6, 5, 4, 3,  2, 1, 0, 1,  2, 3, 4, 5,  6, 7, 8, 7,  6, 5, 4, 3,  2, 1, 0, 1,  2, 3, 4, 5,  6, 7, 8
//     /*  4x4  */ { 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0 },
//     /*  8x8  */ { 1, 0, 1, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 1, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 1 },
//     /* 16x16 */ { 1, 0, 1, 1,  1, 1, 1, 1,  1, 0, 0, 0,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 0, 0, 0,  1, 1, 1, 1,  1, 1, 1 },
//     /* 32x32 */ { 1, 0, 1, 1,  1, 1, 1, 1,  1, 1, 0, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 0, 1,  1, 1, 1, 1,  1, 1, 1 },
//     /* 64x64 */ { 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0 },
// };

// typedef union PackedUInt8
// {
//     struct __align__(8) 
//     {
//         UInt8 uc[4];
//     };
//     UInt32 hInt;
// } PackedUInt8;
// 
static __device__ __inline__ void __prefetch(void *ptr)
{
	asm volatile ("prefetch.L1 [%0];" : : "r"(ptr));
}

#ifndef DEBUG_GPU
__global__
#endif
void xPredIntraAng_gpu0(
    UInt8   *pucDst,
    CUInt8  *pucRef,
    CUInt32  nSize,
    CUInt32  bLuma
)
{
    CUInt32 nMode = 1 + threadIdx.x + blockIdx.x * (NUM_INTRA_MODE - 1)/2;
    CUInt32 nLog2Size = xLog2_new( nSize );
    CInt32  nIntraPredAngle  = cxg_aucIntraPredAngle[nMode];
    //CUInt bFilter = cxg_aucIntraFilterType[nLog2Size-2][nMode];
    CUInt bFilter =  (cxg_aucIntraFilterTypePacked[nLog2Size-2] >> nMode) & 1;
    CUInt bModeHor = (nMode < 18);
    CUInt8 *pucTopLeft;
    UInt32 i, x, k;
    __shared__ __declspec(align(8)) UInt8 ucRef_s[2][4*MAX_CU_SIZE+1+7];  // +3 -> +7
    UInt8 pucRefMain[2*MAX_CU_SIZE];
    //__shared__ UInt8 ucRefMain[NUM_INTRA_MODE][2*MAX_CU_SIZE];
    //UInt8 *pucRefMain = ucRefMain[nMode];
    UInt8 uclDst[MAX_CU_SIZE*MAX_CU_SIZE];
    Int8 pucFilterPix[MAX_CU_SIZE];
    UInt8 ucDcVal;
    UInt32 uiSumTop=0, uiSumLeft=0;
    CUInt8 *pModeIdx = ucModeIdx[nLog2Size-2][nMode];
    Int offset;

    if ( threadIdx.x == 0 ) {
        UInt64 *P0 = (UInt64 *)&ucRef_s[0][0];
        UInt64 *P1 = (UInt64 *)&ucRef_s[1][0];
        UInt64 *Q0 = (UInt64 *)(pucRef                    );
        UInt64 *Q1 = (UInt64 *)(pucRef + 4*MAX_CU_SIZE+1+7);
        for( i=0; i<nSize>>1; i++ ) {
            *P0++ = *Q0++;
            *P1++ = *Q1++;
        }
        ucRef_s[0][4*nSize] = pucRef[4*nSize];
        ucRef_s[1][4*nSize] = pucRef[4*nSize+4*MAX_CU_SIZE+1+7];
        //memcpy( ucRef_s, pucRef, 4*nSize+1 );
    }
    __syncthreads();
    pucRef = ucRef_s[bFilter];

    pucDst += nMode * MAX_CU_SIZE * MAX_CU_SIZE;
    //pucRef += (bFilter ? 4*MAX_CU_SIZE+1+7 : 0);
    //__prefetch( (void *)(pucRef   ) );
    //__prefetch( (void *)(pucRef+64) );

    pucTopLeft = pucRef + 2 * nSize;
    // Get reference pixel
//     for( i=0; i<2*nSize; i++ ) {
//         CUInt8 ucIdx = ucModeIdx[nLog2Size-2][nMode][i];
//         pucRefMain[i] = pucRef[ ucIdx ];
//     }

    for( i=0; i<nSize; i+=4 ) {
        pucRefMain[i*2+0] = pucRef[ *pModeIdx++ ];
        pucRefMain[i*2+1] = pucRef[ *pModeIdx++ ];
        pucRefMain[i*2+2] = pucRef[ *pModeIdx++ ];
        pucRefMain[i*2+3] = pucRef[ *pModeIdx++ ];
        pucRefMain[i*2+4] = pucRef[ *pModeIdx++ ];
        pucRefMain[i*2+5] = pucRef[ *pModeIdx++ ];
        pucRefMain[i*2+6] = pucRef[ *pModeIdx++ ];
        pucRefMain[i*2+7] = pucRef[ *pModeIdx++ ];

        pucFilterPix[i+0] = (pucTopLeft[(i+1+0)*(bModeHor ? 1 : -1)] - pucTopLeft[0]) >> 1;
        uiSumLeft += pucTopLeft[i+0-nSize];
        uiSumTop  += pucTopLeft[i+0+1];

        pucFilterPix[i+1] = (pucTopLeft[(i+1+1)*(bModeHor ? 1 : -1)] - pucTopLeft[0]) >> 1;
        uiSumLeft += pucTopLeft[i+1-nSize];
        uiSumTop  += pucTopLeft[i+1+1];

        pucFilterPix[i+2] = (pucTopLeft[(i+1+2)*(bModeHor ? 1 : -1)] - pucTopLeft[0]) >> 1;
        uiSumLeft += pucTopLeft[i+2-nSize];
        uiSumTop  += pucTopLeft[i+2+1];

        pucFilterPix[i+3] = (pucTopLeft[(i+1+3)*(bModeHor ? 1 : -1)] - pucTopLeft[0]) >> 1;
        uiSumLeft += pucTopLeft[i+3-nSize];
        uiSumTop  += pucTopLeft[i+3+1];
    }
    //ucDcVal = (uiSumTop + uiSumLeft + nSize) / (nSize + nSize);
    ucDcVal = (uiSumTop + uiSumLeft + nSize) >> (1 + nLog2Size);

    // 8.4.3.1.6
    Int deltaPos = ((nMode == 2) || (nMode == 34) ? -32 : 0);
    offset = (nMode > 10 && nMode < 26) ? nSize-1 + (nMode == 18 || nSize == 4 ? 1 : 0) : 0;
    //offset = (nIntraPredAngle < 0 ? 2*nSize-1-nSize+1-1 + (nMode == 18 && nSize != 4) + (nSize == 4) : 0);
    //offset = ucOffset[nLog2Size-2][nMode];

    for( k=0; k<nSize; k++ ) {
        deltaPos += nIntraPredAngle;
        Int32 iIdx  = deltaPos >> 5;  // (8-53)
        UInt32 iFact = deltaPos & 31;  // (8-54)
        Int refMainIndex = iIdx+offset;
        UInt32 pix0 = pucRefMain[refMainIndex  ];
        UInt32 pix1 = pucRefMain[refMainIndex+1];
        UInt32 pix = (nMode == DC_IDX) ? ucDcVal : ( ( ((32-iFact)*pix0+8) + (iFact*pix1+8) ) >> 5 );
        Int8 pix_filter = ( bLuma && (nIntraPredAngle == 0) ) ? pucFilterPix[k] : 0;
        UInt px, py;

        //pix = Clip( pix + pix_filter );
        asm volatile ( "vadd.u32.u32.s32.sat %0.b0, %1.b0, %2.b0, 0;" : "=r"(pix) : "r"(pix), "r"((int)pix_filter) );
        px = bModeHor ? k : k*MAX_CU_SIZE;
        uclDst[px] = pix;

        // Do linear filtering
        for( x=1; x<nSize; x++ ) {
            refMainIndex++;
            pix0 = pix1;
            pix1 = pucRefMain[refMainIndex+1];
            pix = ( nMode == DC_IDX ) ? ucDcVal : ( ( (32-iFact)*pix0 + (iFact*pix1+16) ) >> 5 );

            px = bModeHor ? k : x;
            py = bModeHor ? x : k;
            uclDst[py*MAX_CU_SIZE+px] = pix;
        }
    }
    if ( bLuma && nMode == DC_IDX ) {
        for( x=1; x<nSize; x++ ) {
            uclDst[x            ] = ( (pucRefMain[x+nSize] + 3 * ucDcVal + 2) >> 2 );
            uclDst[x*MAX_CU_SIZE] = ( (pucRefMain[x      ] + 3 * ucDcVal + 2) >> 2 );
        }
        uclDst[0] = ( pucRefMain[0] + pucRefMain[0+nSize] + 2 * ucDcVal + 2 ) >> 2;
    }
    {
        for( i=0; i<nSize; i++ ) {
            UInt64 *P0 = (UInt64 *)&pucDst[i*MAX_CU_SIZE];
            UInt64 *Q0 = (UInt64 *)&uclDst[i*MAX_CU_SIZE];
            for( x=0; x<nSize; x+=8 ) {
                *P0++ = *Q0++;
            }
        }
    }
#ifndef DEBUG_GPU
    __syncthreads();
#endif
}

#ifndef DEBUG_GPU
__global__
#endif
void xSads_gpu0(
    CUInt8  *pucDst,
    CUInt8  *pucPix,
     UInt32 *puiSads,
    CUInt32  nSize,
    CUInt32  lambda,
    CUInt32  ucMostModeY0,
    CUInt32  ucMostModeY1,
    CUInt32  ucMostModeY2
)
{
    CUInt32 bid = blockIdx.x;   // Mode-1
    CUInt32 tid = threadIdx.x;  // Line
    CUInt32 nMode = bid + 1;;
//     __shared__ UInt32 uiSads[MAX_CU_SIZE];
    UInt32 *P0, *P1, *Q0, *Q1;
    UInt32 *P2, *Q2;
    Int32 uiSad = 0;
    UInt32 uiSadL = 0;
    UInt32 i;
    __declspec(align(8)) UInt8 ucSrc[MAX_CU_SIZE*MAX_CU_SIZE];
    __declspec(align(8)) UInt8 ucRef[MAX_CU_SIZE*MAX_CU_SIZE];

    if( nMode == ucMostModeY0 )
        uiSadL = 1 * lambda;
    else if( nMode == ucMostModeY1 || nMode == ucMostModeY2 )
        uiSadL = 2 * lambda;
    else
        uiSadL = 3 * lambda;

    pucDst  += nMode * MAX_CU_SIZE * MAX_CU_SIZE + tid * MAX_CU_SIZE;
    pucPix  +=                                     tid * MAX_CU_SIZE;
    puiSads += nMode;

    P0 = (UInt32*)ucSrc;
    P1 = (UInt32*)ucRef;
    Q0 = (UInt32*)pucPix;
    Q1 = (UInt32*)pucDst;
    for( i=0; i<nSize; i+=4 ) {
        *P0++ = *Q0++;
        *P1++ = *Q1++;
    }

//     UInt32 uiSad0 = 0;
//     for( i=0; i<nSize; i++ ) {
//         uiSad0 = __usad( ucRef[i], ucSrc[i], uiSad0 );
//     }
    P2 = (UInt32*)ucSrc;
    Q2 = (UInt32*)ucRef;
    //P0[0] = 0x01020304;
    //P1[0] = 0x05060708;
    //UInt32 tmp = 0, tmp1=0;
    for( i=0; i<nSize>>2; i++ ) {
        asm volatile ( "vabsdiff4.u32.u32.u32.add %0, %1, %2, %3;" : "=r"(uiSad) : "r"(P2[i]), "r"(Q2[i]), "r"(uiSad) );
        //asm volatile ( "vabsdiff4.u32.u32.u32     %0, %1, %2, %3;" : "=r"(tmp) : "r"(P0[i]), "r"(P1[i]), "r"(uiSad) );
    }
//     if ( uiSad != uiSad0 ) {
//         printf("[%2d]: uiSad=%08X, uiSad0=%08X\n", tid, uiSad, uiSad0);
//     }
//     uiSads[tid] = uiSad;
    //uiSad = uiSad0;
    //printf("[%2d]: uiSad=%08X, tmp=%08X\n", tid, uiSad, tmp);

#if 1
    for( i=16; i>=1; i>>=1 ) {
        uiSad += __shfl_xor(uiSad, i, 32);
    }
    if ( tid == 0 ) {
        *puiSads = uiSad + uiSadL;
        //printf("(%2d,%2d) -> %08X\n", nMode, tid, uiSad);
    }
#else
    if ( tid == 0 ) {
        if( nMode == ucMostModeY0 )
            uiSad += 1 * lambda;
        else if( nMode == ucMostModeY1 || nMode == ucMostModeY2 )
            uiSad += 2 * lambda;
        else
            uiSad += 3 * lambda;
        for( i=1; i<nSize; i++ ) {
            uiSad += uiSads[i];
        }
        *puiSads = uiSad;
        //printf("(%2d,%2d) -> %08X\n", nMode, tid, uiSad);
    }
#endif
    __syncthreads();
}

extern "C" __host__
void xInitGPU()
{
    int deviceCount;
    cudaGetDeviceCount(&deviceCount);
    if ( deviceCount > 0 ) {
        cudaSetDevice( 0 );
    }
}

extern "C" __host__
void xFreeGPU()
{
    cudaDeviceReset();
}


typedef UInt32 __cdecl xSad( const UInt N, const UInt8 *pSrc, const UInt nStrideSrc, const UInt8 *pRef, const UInt nStrideRef );
extern xSad *xSadN[MAX_CU_DEPTH+1];
extern CUInt8 xg_aucIntraFilterType[5][NUM_INTRA_MODE];
extern void __cdecl xEncIntraPred( UInt8 *pucDstY, UInt8 *pucRefY, UInt nStride, UInt nMode, UInt nSize, UInt bIsLuma );
void __cdecl tPrintMatrix( FILE *fp, char *name, UInt8 *P, UInt uiStride, Int iSize );

extern "C" __host__
void __cdecl xEncIntraPred_gpu(
    UInt8   *pucDst[2],
    UInt8   *pucRef,
    UInt     nSize,
    UInt     bLuma,

    UInt32   lambda,
    UInt8    aucMostModeY[3],
    UInt8   *pucPixY,
    UInt32  *puiSad,
    UInt32  *puiBestModeY,
    UInt32  *puiTmpIdx,
    cudaStream_t stream
)
{
    CUInt nLog2Size = xLog2( nSize );
    UInt32 /*nMode, */nBestModeY;
    UInt32 uiSad, uiBestSadY;
    UInt32 nTmpIdx;
    __declspec(align(128)) UInt8 my_dst[NUM_INTRA_MODE][MAX_CU_SIZE*MAX_CU_SIZE];
    UInt32 uiSads[NUM_INTRA_MODE];
    UInt32 changed = FALSE;
    UInt32 i;

//     UInt8  *pucDst_gpu[2];
    UInt8  *pucRef_gpu;
    UInt8  *pucPixY_gpu;
    UInt8  *my_dst_gpu;
    UInt32 *puiSads_gpu;

    float elapsedTimeInMs = 0.0f;
    cudaEvent_t start, stop;
    cudaEventCreate( &start );
    cudaEventCreate( &stop );

#ifndef DEBUG_GPU
//     cudaHostRegister( pucDst[0], nSize*nSize,               cudaHostRegisterMapped );
//     cudaHostRegister( pucDst[1], nSize*nSize,               cudaHostRegisterMapped );
    cudaHostRegister( pucRef,    2*(4*MAX_CU_SIZE+1+7),     cudaHostRegisterMapped );
    cudaHostRegister( pucPixY,   nSize*MAX_CU_SIZE,         cudaHostRegisterMapped );
    //cudaHostRegister( my_tmp, sizeof(my_tmp),               cudaHostRegisterMapped );
    cudaHostRegister( my_dst[0], sizeof(my_dst),            cudaHostRegisterMapped );
    cudaHostRegister( uiSads,    sizeof(uiSads),            cudaHostRegisterMapped );

//     cudaHostGetDevicePointer( &pucDst_gpu[0], pucDst[0], 0 );
//     cudaHostGetDevicePointer( &pucDst_gpu[1], pucDst[1], 0 );
    cudaHostGetDevicePointer( &pucRef_gpu, pucRef, 0 );
    cudaHostGetDevicePointer( &pucPixY_gpu, pucPixY, 0 );
    //cudaHostGetDevicePointer( &pucMyTmp_gpu, my_tmp, 0 );
    cudaHostGetDevicePointer( &my_dst_gpu, my_dst[0], 0 );
    cudaHostGetDevicePointer( &puiSads_gpu, uiSads, 0 );
#else
//     pucDst_gpu[0] = pucDst[0];
//     pucDst_gpu[1] = pucDst[1];
    pucRef_gpu    = pucRef;
#endif

    //memset( my_dst, 0xCD, sizeof(my_dst) );
    nBestModeY = *puiBestModeY;
    uiBestSadY = *puiSad;
    nTmpIdx = *puiTmpIdx;
    /*for( nMode=1; nMode<NUM_INTRA_MODE; nMode+=34 ) */{
        cudaEventRecord( start, 0 );
        xPredIntraAng_gpu0<<< 2, (NUM_INTRA_MODE-1)/2
#ifdef _OPENMP
            , 0, stream
#endif
        >>>(
            my_dst_gpu,//pucDst_gpu[nTmpIdx],
            pucRef_gpu,
            nSize,
            bLuma
        );
        xSads_gpu0<<< NUM_INTRA_MODE-1, nSize
#ifdef _OPENMP
            , 0, stream
#endif
        >>>(
            my_dst_gpu,
            pucPixY_gpu,
            puiSads_gpu,
            nSize,
            lambda,
            aucMostModeY[0],
            aucMostModeY[1],
            aucMostModeY[2]
        );
        cudaEventRecord( stop, 0 );
        cudaEventSynchronize(stop);
        //cudaDeviceSynchronize();

        cudaEventElapsedTime( &elapsedTimeInMs, start, stop );
        //printf("GPU Time=%f ms\n", elapsedTimeInMs);
        {
            static int sn = 0;
            static int ss[4] = {0, 0, 0, 0};
            static double sum[4] = {0, 0, 0, 0};
            sum[nLog2Size-2] += elapsedTimeInMs;
            ss[nLog2Size-2]++;
            sn++;
            if ( sn % 1024 == 0 ) {
                printf("Avg = (%.4lf, %.4lf, %.4lf, %.4lf)/(%4d, %4d, %4d, %4d)\n", sum[0]/ss[0], sum[1]/ss[1], sum[2]/ss[2], sum[3]/ss[3], ss[0], ss[1], ss[2], ss[3]);
            }
        }

        UInt32 modeOffset;
        for( modeOffset=0; modeOffset<34; modeOffset++ ) {
            UInt32 nRealMode = 1 + modeOffset;
#if 1//defined(DEBUG_GPU)
            UInt i, j;
            UInt8 tmp0[MAX_CU_SIZE*MAX_CU_SIZE];
            UInt bFilter;
            bFilter = xg_aucIntraFilterType[nLog2Size-2][nRealMode];
            xEncIntraPred( tmp0, pucRef + (bFilter ? 4*MAX_CU_SIZE+1+7 : 0), MAX_CU_SIZE, nRealMode, nSize, TRUE );
            for( i=0; i<nSize; i++ ) {
                for( j=0; j<nSize; j++ ) {
                    if ( tmp0[i*MAX_CU_SIZE+j] != my_dst[nRealMode][i*MAX_CU_SIZE+j] ) {
                        printf("ERROR: Mode %2d at (%2d,%2d): %02X -> %02X\n", nRealMode, i, j, tmp0[i*MAX_CU_SIZE+j] & 0xFF, my_dst[nRealMode][i*MAX_CU_SIZE+j] & 0xFF );
                        tPrintMatrix( stdout, "Gold\n", tmp0, MAX_CU_SIZE, nSize );
                        tPrintMatrix( stdout, "My\n", my_dst[nRealMode], MAX_CU_SIZE, nSize );
                        xEncIntraPred( tmp0, pucRef + (bFilter ? 4*MAX_CU_SIZE+1+7 : 0), MAX_CU_SIZE, nRealMode, nSize, TRUE );
                        xPredIntraAng_gpu0<<< 1, 1 >>>(
                            my_dst_gpu,
                            pucRef_gpu,
                            nSize,
                            bLuma
                            );
                    }
                }
            }

            if( nRealMode == aucMostModeY[0] )
                uiSad = 1 * lambda;
            else if( nRealMode == aucMostModeY[1] || nRealMode == aucMostModeY[2] )
                uiSad = 2 * lambda;
            else
                uiSad = 3 * lambda;

            uiSad += xSadN[nLog2Size-2]( nSize,
                                         pucPixY, MAX_CU_SIZE,
                                         my_dst[nRealMode], MAX_CU_SIZE );

            if ( uiSad != uiSads[nRealMode] ) {
                printf( "ERROR: Mode %2d, Sad=%d -> %d\n", nRealMode, uiSad, uiSads[nRealMode] );
            }
#endif
            uiSad = uiSads[nRealMode];

            if( uiSad < uiBestSadY ) {
                uiBestSadY = uiSad;
                nBestModeY = nRealMode;
                //nTmpIdx ^= 1;
                changed = TRUE;
            }
        }
    }
    if ( changed ) {
        for( i=0;i<nSize; i++ ) {
            memcpy( pucDst[nTmpIdx^1] + i*MAX_CU_SIZE, &my_dst[nBestModeY][i*MAX_CU_SIZE], nSize );
        }
    }
    *puiSad = uiBestSadY;
    *puiBestModeY = nBestModeY;
    *puiTmpIdx = nTmpIdx;

#ifndef DEBUG_GPU
    cudaHostUnregister( uiSads );
    cudaHostUnregister( my_dst[0] );
    cudaHostUnregister( pucPixY );
//     cudaHostUnregister( pucDst[0] );
//     cudaHostUnregister( pucDst[1] );
    cudaHostUnregister( pucRef );

    cudaEventDestroy(stop);
    cudaEventDestroy(start);
#endif
}
